{"version":3,"sources":["constants/constants.ts","AnilistClient.tsx","pages/animations/AnimationRouter.tsx","components/card/SimpleCard.tsx","components/logo/Logo.tsx","components/layout/DefaultLayout.tsx","components/spin/FullScreenSpin.tsx","pages/animations/AnimationListV2.tsx","pages/animations/AnimationDetail.tsx","App.tsx","stores/animation/AnimationStore.ts","queries/queries.tsx","services/AnimationService.ts","stores/RootStore.ts","providers/StoreProvider.tsx","index.tsx"],"names":["STORES","PAGE_PATHS","client","ApolloClient","uri","AnimationRouter","match","path","component","AnimationDetail","AnimationListV2","SimpleCard","id","title","coverImage","genres","Meta","Card","to","ANIMATION_LIST","className","hoverable","cover","alt","src","description","join","substr","Logo","this","props","style","width","fontSize","Component","Search","Input","DefaultLayout","placeholder","onSearch","children","FullScreenSpin","display","alignItems","justifyContent","height","size","tip","value","ANIMATION_STORE","setParam","param","page","search","getList","onGenreChange","e","target","checked","push","filter","genre","onPageChange","current","perPage","onSortChange","sort","getAnimations","reset","pageInfo","animations","isLoading","render","map","media","key","romaji","large","onClick","type","onChange","some","padding","marginBottom","total","defaultValue","Option","showSizeChanger","defaultCurrent","currentPage","defaultPageSize","onShowSizeChange","inject","observer","params","App","from","AnimationStore","animationService","hasNextPage","lastPage","requestParam","isAdult","Object","assign","length","then","response","data","Page","finally","decorate","observable","action","gql","AnimationService","fetch","createApolloFetch","query","variables","RootStore","animationStore","instance","rootStore","StoreProvider","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.6a7593c3.chunk.js","sourcesContent":["export enum STORES {\n    ANIMATION_STORE = 'animationStore',\n}\n\nexport enum PAGE_PATHS {\n    ANIMATION_LIST = '/animations'\n}\n","import ApolloClient from \"apollo-boost\";\n\nconst client = new ApolloClient({\n    uri: 'https://graphql.anilist.co'\n});\n\nexport default client;\n","import React from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport {AnimationDetail, AnimationListV2} from \"./index\";\n\nconst AnimationRouter = ({match}: any) => {\n    return (\n        <Switch>\n            <Route path={`${match.path}/:id`} component={AnimationDetail}/>\n            <Route path={`${match.path}`} component={AnimationListV2}/>\n        </Switch>\n    );\n};\n\nexport default AnimationRouter;\n","import React from \"react\";\nimport {Card} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {PAGE_PATHS} from \"../../constants/constants\";\nimport \"./SimpleCard.scss\";\n\nconst SimpleCard = ({id, title, coverImage, genres}: any) => {\n    const {Meta} = Card;\n\n    return <Link to={`${PAGE_PATHS.ANIMATION_LIST}/${id}`}>\n        <Card className={\"simple-card\"}\n              hoverable\n              cover={<img className={\"simple-card-preview\"} alt={title} src={coverImage}/>}>\n            <Meta title={title} description={genres.join(' / ').substr(0, 25)}/>\n        </Card>\n    </Link>\n};\n\nexport default SimpleCard;\n","import React, {Component} from \"react\";\n\nclass Logo extends Component<{className?: string}> {\n    render() {\n        return (\n            <div className={this.props.className || ''} style={{\n                width: '200px',\n                fontSize: '2em'\n            }}>Anilist</div>\n        );\n    }\n};\n\nexport default Logo;\n","import React, {Component} from \"react\";\nimport {Input} from 'antd';\nimport {Logo} from \"../logo\";\nimport './DefaultLayout.scss';\n\nconst { Search } = Input;\ntype Props = {\n    onSearch?: (value: string) => void;\n};\n\nclass DefaultLayout extends Component<Props> {\n    render() {\n        return (\n            <div className=\"default-layout\">\n                <header className=\"default-header\">\n                    <Logo className=\"logo\" />\n                    <Search\n                        className=\"search\"\n                        placeholder=\"input search text\"\n                        onSearch={this.props.onSearch} />\n                </header>\n                <div className=\"default-content-layout\">\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DefaultLayout;\n","import React from \"react\";\nimport {Spin} from \"antd\";\n\nconst FullScreenSpin = () => {\n    return (<div style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: \"100%\",\n        height: \"100%\"\n    }}>\n        <Spin size={\"large\"} tip={\"loading...\"} />\n    </div>)\n};\n\nexport default FullScreenSpin;\n","import React, {Component} from \"react\";\nimport {STORES} from \"../../constants/constants\";\nimport AnimationStore from \"../../stores/animation/AnimationStore\";\nimport {inject, observer} from \"mobx-react\";\nimport {SimpleCard} from \"../../components/card\";\nimport {DefaultLayout} from \"../../components/layout\";\nimport {Button, Checkbox, Icon, Pagination, Select} from \"antd\";\nimport {FullScreenSpin} from \"../../components/spin\";\nimport \"./AnimationListV2.scss\";\nimport {CheckboxChangeEvent} from \"antd/es/checkbox\";\n\ntype Props = {\n    [STORES.ANIMATION_STORE]: AnimationStore\n}\n\nclass AnimationListV2 extends Component<Props> {\n    componentDidMount(): void {\n        this.getList();\n    }\n\n    onSearch = (value: string) => {\n        this.props[STORES.ANIMATION_STORE].setParam({\n            ...this.props[STORES.ANIMATION_STORE].param,\n            page: 1,\n            search: value\n        });\n        this.getList();\n    };\n\n    onGenreChange = (e: CheckboxChangeEvent) => {\n        let {genres} = this.props[STORES.ANIMATION_STORE].param;\n        if (!genres) {\n            genres = [];\n        }\n\n        if (e.target.checked) {\n            genres.push(e.target.value);\n        } else {\n            genres = genres.filter(genre => genre != e.target.value);\n        }\n\n        this.props[STORES.ANIMATION_STORE].setParam({\n            ...this.props[STORES.ANIMATION_STORE].param,\n            page: 1,\n            genres: genres\n        });\n\n        this.getList();\n    };\n\n    onPageChange = (current: number, perPage: number = this.props[STORES.ANIMATION_STORE].param.perPage) => {\n        this.props[STORES.ANIMATION_STORE].setParam({\n            ...this.props[STORES.ANIMATION_STORE].param,\n            page: current,\n            perPage: perPage\n        });\n        this.getList();\n    };\n\n    onSortChange = (sort: string) => {\n        this.props[STORES.ANIMATION_STORE].setParam({\n            ...this.props[STORES.ANIMATION_STORE].param,\n            sort: sort\n        });\n        this.getList();\n    };\n\n    getList = () => {\n        this.props[STORES.ANIMATION_STORE].getAnimations();\n    };\n\n    reset = () => {\n        this.props[STORES.ANIMATION_STORE].setParam({\n            page: 1,\n            perPage: 10\n        });\n        this.getList();\n    };\n\n    render() {\n        const {pageInfo, animations, isLoading, param} = this.props[STORES.ANIMATION_STORE];\n        if (isLoading) {\n            return <DefaultLayout><FullScreenSpin/></DefaultLayout>\n        }\n\n        const render = animations.map(media => (\n            <SimpleCard key={media.id}\n                        id={media.id}\n                        title={media.title.romaji}\n                        coverImage={media.coverImage.large}\n                        genres={media.genres}\n            />\n        ));\n\n        const genres = !param.genres ? [] : param.genres;\n        return <DefaultLayout onSearch={this.onSearch}>\n            <div className=\"content-wrap\">\n                <aside className=\"sidebar\">\n                    <div className=\"main-title\">\n                        <div>Filter</div>\n                        <Button size={\"small\"} onClick={this.reset}>Reset<Icon type=\"redo\"/></Button>\n                    </div>\n                    <div className=\"sidebar-filter border-bottom\">\n                        <div className=\"sidebar-filter-title\">Genres</div>\n                        <div className=\"sidebar-filter-item\">\n                            <div><Checkbox onChange={this.onGenreChange} value={\"Drama\"} checked={genres.some(genre => genre === 'Drama')}>Drama</Checkbox></div>\n                            <div><Checkbox onChange={this.onGenreChange} value={\"Sci-Fi\"} checked={genres.some(genre => genre === 'Sci-Fi')}>Sci-Fi</Checkbox></div>\n                            <div><Checkbox onChange={this.onGenreChange} value={\"Action\"} checked={genres.some(genre => genre === 'Action')}>Action</Checkbox></div>\n                            <div><Checkbox onChange={this.onGenreChange} value={\"Comedy\"} checked={genres.some(genre => genre === 'Comedy')}>Comedy</Checkbox></div>\n                            <div><Checkbox onChange={this.onGenreChange} value={\"Romance\"} checked={genres.some(genre => genre === 'Romance')}>Romance</Checkbox></div>\n                        </div>\n                    </div>\n                </aside>\n                <div className=\"content\">\n                    <div style={{padding: 10, fontSize: '1.5em', marginBottom: 10}}>Total of {pageInfo.total}</div>\n                    <div>\n                        {render}\n                    </div>\n                    <div className=\"pagination-wrap\">\n                        <div className=\"sort\">\n                            <Select defaultValue={param.sort} onChange={this.onSortChange}\n                                    style={{width: 160}}>\n                                <Select.Option value=\"TRENDING_DESC\">Trending</Select.Option>\n                                <Select.Option value=\"FAVOURITES_DESC\">Favourites</Select.Option>\n                                <Select.Option value=\"SCORE_DESC\">Score</Select.Option>\n                                <Select.Option value=\"START_DATE_DESC\">Start date</Select.Option>\n                            </Select>\n                        </div>\n                        <div className=\"pagination\">\n                            <Pagination\n                                showSizeChanger\n                                defaultCurrent={pageInfo.currentPage}\n                                defaultPageSize={pageInfo.perPage}\n                                onShowSizeChange={this.onPageChange}\n                                onChange={this.onPageChange}\n                                total={pageInfo.total}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </DefaultLayout>;\n    }\n}\n\nexport default inject(STORES.ANIMATION_STORE)(observer(AnimationListV2));\n","import React, {Component} from 'react';\nimport {DefaultLayout} from \"../../components/layout\";\n\nclass AnimationDetail extends Component<any, any> {\n    render() {\n        const {match} = this.props;\n        const id = match.params.id;\n\n        return (\n            <DefaultLayout>\n                Detail : {id}\n            </DefaultLayout>\n        );\n    }\n}\n\nexport default AnimationDetail;\n","import React from 'react';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport {BrowserRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport client from './AnilistClient';\nimport 'antd/dist/antd.css';\nimport {PAGE_PATHS} from \"./constants/constants\";\nimport {AnimationRouter} from \"./pages/animations\";\n\nconst App: React.FC = () => {\n    return (\n        <ApolloProvider client={client}>\n            <BrowserRouter>\n                <Switch>\n                    <Route path={PAGE_PATHS.ANIMATION_LIST} component={AnimationRouter}/>\n                    <Redirect from={'/'} to={PAGE_PATHS.ANIMATION_LIST} />\n                </Switch>\n            </BrowserRouter>\n        </ApolloProvider>\n    );\n}\n\nexport default App;\n","import {action, decorate, observable} from \"mobx\";\nimport AnimationService, {AnimationsParam, Media, PageInfo} from \"../../services/AnimationService\";\n\nclass AnimationStore {\n    isLoading: boolean = false;\n    param: AnimationsParam = {page: 1, perPage: 10};\n    animations: Array<Media> = [];\n    pageInfo: PageInfo = {\n        currentPage: 1,\n        hasNextPage: false,\n        lastPage: 1,\n        perPage: 10,\n        total: 0\n    };\n\n    constructor(private animationService: AnimationService) {\n    }\n\n    getAnimations() {\n        this.isLoading = true;\n        const requestParam = {\n            page: this.param.page,\n            perPage: this.param.perPage,\n            isAdult: !!this.param.isAdult,\n            sort: !this.param.sort ? 'TRENDING_DESC' : this.param.sort\n        };\n\n        if (this.param.search) Object.assign(requestParam, {search: this.param.search});\n        if (this.param.genres && this.param.genres.length > 0) Object.assign(requestParam, {genres: this.param.genres});\n        this.param = requestParam;\n\n        this.animationService.getAnimations(requestParam).then(response => {\n            this.animations = response.data.Page.media;\n            this.pageInfo = response.data.Page.pageInfo;\n        }).finally(() => {\n            this.isLoading = false;\n        });\n    }\n\n    setParam(param: AnimationsParam) {\n        this.param = param;\n    }\n}\n\ndecorate(AnimationStore, {\n    animations: observable,\n    pageInfo: observable,\n    param: observable,\n    isLoading: observable,\n    setParam: action,\n    getAnimations: action,\n});\n\nexport default AnimationStore;\n","import gql from \"graphql-tag\";\n\nexport const ANIMATION_LIST = gql`\n    query ($page: Int, $perPage: Int, $isAdult: Boolean, $sort: MediaSort, $search: String, $genres: [String]){\n        Page(page:$page, perPage:$perPage) {\n            pageInfo{\n                total,\n                perPage,\n                currentPage,\n                lastPage,\n                hasNextPage\n            },\n            media(isAdult: $isAdult, sort: [$sort], search: $search, genre_in: $genres) {\n                id\n                title{\n                    romaji\n                    english\n                    native\n                },\n                coverImage{\n                    extraLarge,\n                    large,\n                    medium\n                },\n                genres\n            }\n        }\n    }\n`;\n\nexport const ANIMATION_LIST_QUERY = `\n    query ($page: Int, $perPage: Int, $isAdult: Boolean, $sort: MediaSort, $search: String, $genres: [String]){\n        Page(page:$page, perPage:$perPage) {\n            pageInfo{\n                total,\n                perPage,\n                currentPage,\n                lastPage,\n                hasNextPage\n            },\n            media(isAdult: $isAdult, sort: [$sort], search: $search, genre_in: $genres) {\n                id\n                title{\n                    romaji\n                    english\n                    native\n                },\n                coverImage{\n                    extraLarge,\n                    large,\n                    medium\n                },\n                genres\n            }\n        }\n    }\n`;\n","import {ANIMATION_LIST_QUERY} from \"../queries/queries\";\nimport {createApolloFetch} from \"apollo-fetch\";\n\nexport type AnimationData = {\n    data: Animation;\n}\n\nexport type Animation = {\n    Page: Page;\n}\n\nexport type Page = {\n    pageInfo: PageInfo;\n    media: Array<Media>;\n}\n\nexport type PageInfo = {\n    total: number;\n    perPage: number;\n    currentPage: number;\n    lastPage: number;\n    hasNextPage: boolean;\n}\n\nexport type Media = {\n    id: number;\n    title: MediaTitle;\n    coverImage: MediaCoverImage;\n    genres: Array<string>\n}\n\nexport type MediaTitle = {\n    romaji: string;\n    english: string;\n    native: string;\n}\n\nexport type MediaCoverImage = {\n    extraLarge: string;\n    large: string;\n    medium: string;\n}\n\nexport type AnimationsParam = {\n    page: number;\n    perPage: number;\n    isAdult?: boolean;\n    sort?: string;\n    search?: string;\n    genres?: Array<string>;\n}\n\nclass AnimationService {\n    private fetch = createApolloFetch({\n        uri: 'https://graphql.anilist.co'\n    });\n    public async getAnimations(param: AnimationsParam): Promise<AnimationData> {\n        return await this.fetch({\n            query: ANIMATION_LIST_QUERY,\n            variables: param\n        });\n    }\n}\n\nexport default AnimationService;\n","import AnimationStore from \"./animation/AnimationStore\";\nimport AnimationService from \"../services/AnimationService\";\n\nexport default class RootStore {\n    static instance: RootStore;\n\n    animationStore = new AnimationStore(new AnimationService());\n}\n","import RootStore from \"../stores/RootStore\";\nimport {Provider} from \"mobx-react\";\nimport React from \"react\";\n\nconst rootStore = new RootStore();\nconst StoreProvider: React.FunctionComponent = ({children }) => (<Provider {...rootStore}>{children}</Provider>);\n\nexport default StoreProvider;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport StoreProvider from \"./providers/StoreProvider\";\n\nReactDOM.render(\n    <StoreProvider>\n        <App/>\n    </StoreProvider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}