{"version":3,"sources":["constants/constants.ts","AnilistClient.tsx","components/logo/Logo.tsx","pages/animations/AnimationRouter.tsx","components/card/SimpleCard.tsx","components/spin/FullScreenSpin.tsx","pages/animations/AnimationListV2.tsx","services/AnimationService.ts","queries/queries.tsx","pages/animations/AnimationDetail.tsx","components/layout/DefaultLayout.tsx","App.tsx","stores/animation/AnimationListStore.ts","stores/RootStore.ts","providers/StoreProvider.tsx","index.tsx"],"names":["STORES","PAGE_PATHS","API","client","ApolloClient","uri","Logo","to","className","this","props","style","width","fontSize","Component","AnimationRouter","match","path","component","AnimationDetail","AnimationListV2","SimpleCard","id","title","coverImage","genres","Meta","Card","ANIMATION_LIST","hoverable","cover","alt","src","description","join","substr","FullScreenSpin","display","alignItems","justifyContent","height","size","tip","onGenreChange","e","ANIMATION_STORE","param","target","checked","push","value","filter","genre","setParam","page","getList","onPageChange","current","perPage","onSortChange","sort","query","queryString","parse","location","search","getAnimations","reset","history","prevProps","pageInfo","animations","isLoading","render","map","media","key","romaji","large","onClick","type","onChange","some","padding","marginBottom","total","defaultValue","Option","showSizeChanger","defaultCurrent","currentPage","defaultPageSize","onShowSizeChange","inject","observer","AnimationService","fetch","createApolloFetch","ANILIST_CO","variables","context","animationService","state","params","getAnimation","then","response","setState","data","Media","characters","nodes","character","image","name","full","dangerouslySetInnerHTML","__html","trailerUrl","trailer","trailerId","trailerSite","site","backgroundImage","bannerImage","backgroundSize","averageScore","href","siteUrl","Search","Input","DefaultLayout","onSearch","placeholder","from","App","AnimationListStore","hasNextPage","lastPage","requestParam","isAdult","Object","assign","length","Page","finally","decorate","observable","action","RootStore","animationStore","instance","rootStore","StoreProvider","children","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.78eb3437.chunk.js","sourcesContent":["export enum STORES {\n    ANIMATION_STORE = 'animationStore',\n}\n\nexport enum PAGE_PATHS {\n    ANIMATION_LIST = '/animations'\n}\n\nexport enum API {\n    ANILIST_CO = 'https://graphql.anilist.co'\n}\n","import ApolloClient from \"apollo-boost\";\n\nconst client = new ApolloClient({\n    uri: 'https://graphql.anilist.co'\n});\n\nexport default client;\n","import React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\n\nclass Logo extends Component<{ className?: string }> {\n    render() {\n        return (\n            <Link to={'/'}>\n                <div className={this.props.className || ''} style={{\n                    width: '200px',\n                    fontSize: '2em'\n                }}>Anilist\n                </div>\n            </Link>\n        );\n    }\n}\n\nexport default Logo;\n","import React from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport {AnimationDetail, AnimationListV2} from \"./index\";\n\nconst AnimationRouter = ({match}: any) => {\n    return (\n        <Switch>\n            <Route path={`${match.path}/:id`} component={AnimationDetail}/>\n            <Route path={`${match.path}`} component={AnimationListV2}/>\n        </Switch>\n    );\n};\n\nexport default AnimationRouter;\n","import React from \"react\";\nimport {Card} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {PAGE_PATHS} from \"../../constants/constants\";\nimport \"./SimpleCard.scss\";\n\nconst SimpleCard = ({id, title, coverImage, genres}: any) => {\n    const {Meta} = Card;\n\n    return <Link to={`${PAGE_PATHS.ANIMATION_LIST}/${id}`}>\n        <div className={\"simple-card\"}>\n        <Card hoverable cover={<img className={\"simple-card-preview\"} alt={title} src={coverImage}/>}>\n            <Meta title={title} description={genres.join(' / ').substr(0, 25)}/>\n        </Card>\n        </div>\n    </Link>\n};\n\nexport default SimpleCard;\n","import React from \"react\";\nimport {Spin} from \"antd\";\n\nconst FullScreenSpin = () => {\n    return (<div style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: \"100%\",\n        height: \"100%\"\n    }}>\n        <Spin size={\"large\"} tip={\"loading...\"} />\n    </div>)\n};\n\nexport default FullScreenSpin;\n","import React, {Component} from \"react\";\nimport {PAGE_PATHS, STORES} from \"../../constants/constants\";\nimport AnimationListStore from \"../../stores/animation/AnimationListStore\";\nimport {inject, observer} from \"mobx-react\";\nimport {SimpleCard} from \"../../components/card\";\nimport {Button, Checkbox, Icon, Pagination, Select} from \"antd\";\nimport {FullScreenSpin} from \"../../components/spin\";\nimport \"./AnimationListV2.scss\";\nimport {CheckboxChangeEvent} from \"antd/es/checkbox\";\nimport {RouteComponentProps} from \"react-router-dom\";\nimport queryString from \"query-string\";\n\ninterface Props extends RouteComponentProps {\n    [STORES.ANIMATION_STORE]: AnimationListStore\n}\n\nclass AnimationListV2 extends Component<Props> {\n    componentDidMount(): void {\n        this.getList();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.location !== prevProps.location) {\n            this.getList();\n        }\n    }\n\n    onGenreChange = (e: CheckboxChangeEvent) => {\n        let {genres} = this.props[STORES.ANIMATION_STORE].param;\n        if (!genres) {\n            genres = [];\n        }\n\n        if (e.target.checked) {\n            genres.push(e.target.value);\n        } else {\n            genres = genres.filter(genre => genre !== e.target.value);\n        }\n\n        this.props[STORES.ANIMATION_STORE].setParam({\n            ...this.props[STORES.ANIMATION_STORE].param,\n            page: 1,\n            genres: genres\n        });\n\n        this.getList();\n    };\n\n    onPageChange = (current: number, perPage: number = this.props[STORES.ANIMATION_STORE].param.perPage) => {\n        this.props[STORES.ANIMATION_STORE].setParam({\n            ...this.props[STORES.ANIMATION_STORE].param,\n            page: current,\n            perPage: perPage\n        });\n        this.getList();\n    };\n\n    onSortChange = (sort: string) => {\n        this.props[STORES.ANIMATION_STORE].setParam({\n            ...this.props[STORES.ANIMATION_STORE].param,\n            sort: sort\n        });\n        this.getList();\n    };\n\n    getList = () => {\n        const query = queryString.parse(this.props.location.search);\n        this.props[STORES.ANIMATION_STORE].setParam({\n            ...this.props[STORES.ANIMATION_STORE].param,\n            search: query.search as string || ''\n        });\n        this.props[STORES.ANIMATION_STORE].getAnimations();\n    };\n\n    reset = () => {\n        this.props[STORES.ANIMATION_STORE].setParam({\n            page: 1,\n            perPage: 10,\n        });\n\n        this.props.history.push(PAGE_PATHS.ANIMATION_LIST);\n    };\n\n    render() {\n        const {pageInfo, animations, isLoading, param} = this.props[STORES.ANIMATION_STORE];\n        if (isLoading) {\n            return <FullScreenSpin/>\n        }\n\n        const render = animations.map(media => (\n            <SimpleCard key={media.id}\n                        id={media.id}\n                        title={media.title.romaji}\n                        coverImage={media.coverImage.large}\n                        genres={media.genres}\n            />\n        ));\n\n        const genres = !param.genres ? [] : param.genres;\n        return <div className=\"content-wrap\">\n            <aside className=\"sidebar\">\n                <div className=\"main-title\">\n                    <div>Filter</div>\n                    <Button size={\"small\"} onClick={this.reset}>Reset<Icon type=\"redo\"/></Button>\n                </div>\n                <div className=\"sidebar-filter border-bottom\">\n                    <div className=\"sidebar-filter-title\">Genres</div>\n                    <div className=\"sidebar-filter-item\">\n                        <div><Checkbox onChange={this.onGenreChange} value={\"Drama\"} checked={genres.some(genre => genre === 'Drama')}>Drama</Checkbox></div>\n                        <div><Checkbox onChange={this.onGenreChange} value={\"Sci-Fi\"} checked={genres.some(genre => genre === 'Sci-Fi')}>Sci-Fi</Checkbox></div>\n                        <div><Checkbox onChange={this.onGenreChange} value={\"Action\"} checked={genres.some(genre => genre === 'Action')}>Action</Checkbox></div>\n                        <div><Checkbox onChange={this.onGenreChange} value={\"Comedy\"} checked={genres.some(genre => genre === 'Comedy')}>Comedy</Checkbox></div>\n                        <div><Checkbox onChange={this.onGenreChange} value={\"Romance\"} checked={genres.some(genre => genre === 'Romance')}>Romance</Checkbox></div>\n                        <div><Checkbox onChange={this.onGenreChange} value={\"Fantasy\"} checked={genres.some(genre => genre === 'Fantasy')}>Fantasy</Checkbox></div>\n                    </div>\n                </div>\n            </aside>\n            <div className=\"content\">\n                <div style={{padding: 10, fontSize: '1.5em', marginBottom: 10}}>Total of {pageInfo.total}</div>\n                <div className=\"pagination-wrap\" style={{marginBottom: 10}}>\n                    <div className=\"sort\">\n                        <Select defaultValue={param.sort} onChange={this.onSortChange}\n                                style={{width: 160}}>\n                            <Select.Option value=\"TRENDING_DESC\">Trending</Select.Option>\n                            <Select.Option value=\"FAVOURITES_DESC\">Favourites</Select.Option>\n                            <Select.Option value=\"SCORE_DESC\">Score</Select.Option>\n                            <Select.Option value=\"START_DATE_DESC\">Start date</Select.Option>\n                        </Select>\n                    </div>\n                    <div className=\"pagination\">\n                        <Pagination\n                            showSizeChanger\n                            defaultCurrent={pageInfo.currentPage}\n                            defaultPageSize={pageInfo.perPage}\n                            onShowSizeChange={this.onPageChange}\n                            onChange={this.onPageChange}\n                            total={pageInfo.total}\n                        />\n                    </div>\n                </div>\n                <div>\n                    {render}\n                </div>\n                <div className=\"pagination-wrap\">\n                    <div className=\"sort\">\n                        <Select defaultValue={param.sort} onChange={this.onSortChange}\n                                style={{width: 160}}>\n                            <Select.Option value=\"TRENDING_DESC\">Trending</Select.Option>\n                            <Select.Option value=\"FAVOURITES_DESC\">Favourites</Select.Option>\n                            <Select.Option value=\"SCORE_DESC\">Score</Select.Option>\n                            <Select.Option value=\"START_DATE_DESC\">Start date</Select.Option>\n                        </Select>\n                    </div>\n                    <div className=\"pagination\">\n                        <Pagination\n                            showSizeChanger\n                            defaultCurrent={pageInfo.currentPage}\n                            defaultPageSize={pageInfo.perPage}\n                            onShowSizeChange={this.onPageChange}\n                            onChange={this.onPageChange}\n                            total={pageInfo.total}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>;\n    }\n}\n\nexport default inject(STORES.ANIMATION_STORE)(observer(AnimationListV2));\n","import {ANIMATION_LIST_QUERY, ANIMATION_QUERY} from \"../queries/queries\";\nimport {createApolloFetch, FetchResult} from \"apollo-fetch\";\nimport {API} from \"../constants/constants\";\n\nexport type Animation = {\n    Page: Page;\n}\n\nexport type Page = {\n    pageInfo: PageInfo;\n    media: Array<Media>;\n}\n\nexport type PageInfo = {\n    total: number;\n    perPage: number;\n    currentPage: number;\n    lastPage: number;\n    hasNextPage: boolean;\n}\n\nexport type Media = {\n    id: number;\n    title: MediaTitle;\n    coverImage: MediaCoverImage;\n    genres: Array<string>;\n    status: string;\n    description: string;\n    startDate: FuzzyDate;\n    averageScore: number;\n    trailer: MediaTrailer;\n    relations: MediaConnection;\n    characters: CharacterConnection;\n    siteUrl: string;\n    bannerImage: string;\n}\n\nexport type CharacterConnection = {\n    nodes: Array<Character>;\n}\n\nexport type Character = {\n    id: number;\n    name: CharacterName;\n    image: CharacterImage;\n    description: string;\n}\n\nexport type CharacterName = {\n    full: string;\n}\n\nexport type CharacterImage = {\n    large: string;\n}\n\nexport type MediaConnection = {\n    nodes: Array<Media>;\n}\n\nexport type MediaTrailer = {\n    id: string;\n    site: string;\n    thumbnail: string;\n}\n\nexport type FuzzyDate = {\n    year: string;\n    month: string;\n    day: string;\n}\n\nexport type MediaTitle = {\n    romaji: string;\n    english: string;\n    native: string;\n}\n\nexport type MediaCoverImage = {\n    extraLarge: string;\n    large: string;\n    medium: string;\n}\n\nexport type AnimationsParam = {\n    page: number;\n    perPage: number;\n    isAdult?: boolean;\n    sort?: string;\n    search?: string;\n    genres?: Array<string>;\n}\n\nclass AnimationService {\n    private fetch = createApolloFetch({\n        uri: API.ANILIST_CO\n    });\n\n    public async getAnimations(param: AnimationsParam): Promise<FetchResult> {\n        return await this.fetch({\n            query: ANIMATION_LIST_QUERY,\n            variables: param\n        });\n    }\n\n    public async getAnimation(id: number): Promise<FetchResult> {\n        return await this.fetch({\n            query: ANIMATION_QUERY,\n            variables: {id: id}\n        });\n    }\n}\n\nexport default AnimationService;\n","export const ANIMATION_LIST_QUERY = `\n    query ($page: Int, $perPage: Int, $isAdult: Boolean, $sort: MediaSort, $search: String, $genres: [String]){\n        Page(page:$page, perPage:$perPage) {\n            pageInfo{\n                total\n                perPage\n                currentPage\n                lastPage\n                hasNextPage\n            },\n            media(isAdult: $isAdult, sort: [$sort], search: $search, genre_in: $genres) {\n                id\n                title{\n                    romaji\n                    english\n                    native\n                },\n                coverImage{\n                    extraLarge\n                    large\n                    medium\n                },\n                genres\n            }\n        }\n    }\n`;\n\nexport const ANIMATION_QUERY = `\nquery ($id: Int) {\n    Media (id: $id) {\n        id\n        title{\n            romaji\n            english\n            native\n        }\n        coverImage{\n            extraLarge\n            large\n            medium\n        }\n        genres\n        status\n        description\n        startDate{\n            year\n            month\n            day\n        }\n        averageScore\n        trailer {\n            site\n            thumbnail\n            id\n        }\n        relations {\n            nodes {\n                title {\n                  romaji\n                  english\n                  native\n                }\n                description\n                coverImage {\n                  extraLarge\n                  large\n                  medium\n                }\n            }\n        }\n        characters {\n            nodes {\n                id\n                name {\n                    full\n                }\n                image {\n                    large\n                }\n                description\n            }\n        }\n        siteUrl\n        bannerImage\n    }\n}\n`;\n","import React, {Component} from 'react';\nimport AnimationService, {Media} from \"../../services/AnimationService\";\nimport {Button} from \"antd\";\nimport {FullScreenSpin} from \"../../components/spin\";\nimport \"./AnimationDetail.scss\";\n\ntype States = {\n    media: Media | null,\n}\n\nclass AnimationDetail extends Component<any, States> {\n    private readonly animationService: AnimationService;\n\n    constructor(props: any, context: States) {\n        super(props, context);\n        this.animationService = new AnimationService();\n        this.state = {\n            media: null,\n        };\n    }\n\n    componentDidMount(): void {\n        const {match} = this.props;\n        const id = match.params.id;\n\n        this.animationService.getAnimation(id).then(response => {\n            this.setState({\n                media: response.data.Media,\n            });\n        });\n    }\n\n    render() {\n        if (this.state.media == null) {\n            return <FullScreenSpin/>\n        }\n\n        const {media} = this.state;\n        const characters = media.characters.nodes.map(character => {\n            return (<div key={character.id} className={\"character\"}>\n                <div className={\"preview\"}><img src={character.image.large}/></div>\n                <div className={\"info\"}>\n                    <h4>{character.name.full}</h4>\n                    <p dangerouslySetInnerHTML={{__html: character.description}}/>\n                </div>\n            </div>)\n        });\n\n        let trailerUrl = '';\n        if (media.trailer) {\n            const trailerId = media.trailer.id;\n            const trailerSite = media.trailer.site;\n\n            if (trailerSite === 'youtube') {\n                trailerUrl = `https://www.youtube.com/watch?v=${trailerId}`;\n            } else if (trailerSite === 'dailymotion') {\n                trailerUrl = `http://www.dailymotion.com/embed/video/${trailerId}`;\n            }\n        }\n        return (\n            <div className={\"item-detail\"}>\n                <div className={\"item-head\"} style={{backgroundImage: `url(${media.bannerImage})`, backgroundSize: 'cover'}}>\n                    <div className={\"item-head-content\"}>\n                        <div className={\"item-preview\"}>\n                            <img src={media.coverImage.large}/>\n                        </div>\n                        <div className={\"item-info\"}>\n                            <div className={\"info\"}>\n                                <h1>{media.title.romaji}</h1>\n                                <h3>{media.genres.join(\", \")}</h3>\n                                <h3>Average Score {media.averageScore}</h3>\n                            </div>\n                            <div className={\"trailer\"}>\n                                {trailerUrl ?\n                                    <Button target={\"_black\"} href={trailerUrl}>Trailer</Button> : ''}\n                                <Button target={\"_black\"} href={media.siteUrl}>More information</Button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className={\"item-content\"}>\n                    <div className={\"main\"}>\n                        <div className={\"section\"}>\n                            <h4>Characters</h4>\n                            <div className={\"characters\"}>\n                                {characters}\n                            </div>\n                        </div>\n                    </div>\n                    <div className={\"side\"}>\n                        <div className={\"section\"}>\n                            <h4>Story</h4>\n                            <p dangerouslySetInnerHTML={{__html: media.description}}/>\n                        </div>\n                        <div className={\"section\"}>\n                            <h4>Recommendations</h4>\n                            <div className={\"recommendations\"}>\n                                Preparing for service...\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default AnimationDetail;\n","import React, {Component} from \"react\";\nimport {Input} from 'antd';\nimport {Logo} from \"../logo\";\nimport './DefaultLayout.scss';\nimport {Redirect, Route, RouteComponentProps, Switch} from \"react-router-dom\";\nimport {AnimationRouter} from \"../../pages/animations\";\nimport {PAGE_PATHS} from \"../../constants/constants\";\n\nconst { Search } = Input;\n\nclass DefaultLayout extends Component<RouteComponentProps> {\n    onSearch = (value: string) => {\n        this.props.history.push(`${PAGE_PATHS.ANIMATION_LIST}?search=${value}`);\n    };\n\n    render() {\n        return (\n            <div className=\"default-layout\">\n                <header className=\"default-header\">\n                    <Logo className=\"logo\" />\n                    <Search\n                        className=\"search\"\n                        placeholder=\"input search text\"\n                        onSearch={this.onSearch}\n                    />\n                </header>\n                <div className=\"default-content-layout\">\n                    <Switch>\n                        <Route path={PAGE_PATHS.ANIMATION_LIST} component={AnimationRouter}/>\n                        <Redirect from={'/'} to={PAGE_PATHS.ANIMATION_LIST} />\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DefaultLayout;\n","import React from 'react';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport client from './AnilistClient';\nimport 'antd/dist/antd.css';\nimport {DefaultLayout} from \"./components/layout\";\n\nconst App: React.FC = () => {\n    return (\n        <ApolloProvider client={client}>\n            <BrowserRouter>\n                <Switch>\n                    <Route path={'/'} component={DefaultLayout}/>\n                </Switch>\n            </BrowserRouter>\n        </ApolloProvider>\n    );\n}\n\nexport default App;\n","import {action, decorate, observable} from \"mobx\";\nimport AnimationService, {AnimationsParam, Media, PageInfo} from \"../../services/AnimationService\";\n\nclass AnimationListStore {\n    isLoading: boolean = false;\n    param: AnimationsParam = {page: 1, perPage: 10};\n    animations: Array<Media> = [];\n    pageInfo: PageInfo = {\n        currentPage: 1,\n        hasNextPage: false,\n        lastPage: 1,\n        perPage: 10,\n        total: 0\n    };\n\n    constructor(private animationService: AnimationService) {\n    }\n\n    getAnimations() {\n        this.isLoading = true;\n        const requestParam = {\n            page: this.param.page,\n            perPage: this.param.perPage,\n            isAdult: !!this.param.isAdult,\n            sort: !this.param.sort ? 'TRENDING_DESC' : this.param.sort\n        };\n\n        if (this.param.search) Object.assign(requestParam, {search: this.param.search});\n        if (this.param.genres && this.param.genres.length > 0) Object.assign(requestParam, {genres: this.param.genres});\n        this.param = requestParam;\n\n        this.animationService.getAnimations(requestParam).then(response => {\n            this.animations = response.data.Page.media;\n            this.pageInfo = response.data.Page.pageInfo;\n        }).finally(() => {\n            this.isLoading = false;\n        });\n    }\n\n    setParam(param: AnimationsParam) {\n        this.param = param;\n    }\n}\n\ndecorate(AnimationListStore, {\n    animations: observable,\n    pageInfo: observable,\n    param: observable,\n    isLoading: observable,\n    setParam: action,\n    getAnimations: action,\n});\n\nexport default AnimationListStore;\n","import AnimationListStore from \"./animation/AnimationListStore\";\nimport AnimationService from \"../services/AnimationService\";\n\nexport default class RootStore {\n    static instance: RootStore;\n\n    animationStore = new AnimationListStore(new AnimationService());\n}\n","import RootStore from \"../stores/RootStore\";\nimport {Provider} from \"mobx-react\";\nimport React from \"react\";\n\nconst rootStore = new RootStore();\nconst StoreProvider: React.FunctionComponent = ({children }) => (<Provider {...rootStore}>{children}</Provider>);\n\nexport default StoreProvider;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport StoreProvider from \"./providers/StoreProvider\";\n\nReactDOM.render(\n    <StoreProvider>\n        <App/>\n    </StoreProvider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}