{"version":3,"sources":["constants/constants.ts","AnilistClient.tsx","components/logo/Logo.tsx","pages/animations/AnimationRouter.tsx","components/card/SimpleCard.tsx","components/spin/FullScreenSpin.tsx","pages/animations/AnimationListV2.tsx","pages/animations/AnimationDetail.tsx","components/layout/DefaultLayout.tsx","App.tsx","stores/animation/AnimationListStore.ts","services/AnimationService.ts","queries/queries.tsx","stores/RootStore.ts","providers/StoreProvider.tsx","index.tsx"],"names":["STORES","PAGE_PATHS","client","ApolloClient","uri","Logo","to","className","this","props","style","width","fontSize","Component","AnimationRouter","match","path","component","AnimationDetail","AnimationListV2","SimpleCard","id","title","coverImage","genres","Meta","Card","ANIMATION_LIST","hoverable","cover","alt","src","description","join","substr","FullScreenSpin","display","alignItems","justifyContent","height","size","tip","onGenreChange","e","ANIMATION_STORE","param","target","checked","push","value","filter","genre","setParam","page","getList","onPageChange","current","perPage","onSortChange","sort","getAnimations","reset","query","queryString","parse","location","search","prevProps","pageInfo","animations","isLoading","render","map","media","key","romaji","large","onClick","type","onChange","some","padding","marginBottom","total","defaultValue","Option","showSizeChanger","defaultCurrent","currentPage","defaultPageSize","onShowSizeChange","inject","observer","params","Search","Input","DefaultLayout","onSearch","history","placeholder","from","App","AnimationListStore","animationService","hasNextPage","lastPage","requestParam","isAdult","Object","assign","length","then","response","data","Page","finally","decorate","observable","action","AnimationService","fetch","createApolloFetch","variables","RootStore","animationStore","instance","rootStore","StoreProvider","children","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.cdf0750f.chunk.js","sourcesContent":["export enum STORES {\n    ANIMATION_STORE = 'animationStore',\n}\n\nexport enum PAGE_PATHS {\n    ANIMATION_LIST = '/animations'\n}\n","import ApolloClient from \"apollo-boost\";\n\nconst client = new ApolloClient({\n    uri: 'https://graphql.anilist.co'\n});\n\nexport default client;\n","import React, {Component} from \"react\";\nimport {Link} from \"react-router-dom\";\n\nclass Logo extends Component<{ className?: string }> {\n    render() {\n        return (\n            <Link to={'/'}>\n                <div className={this.props.className || ''} style={{\n                    width: '200px',\n                    fontSize: '2em'\n                }}>Anilist\n                </div>\n            </Link>\n        );\n    }\n}\n\nexport default Logo;\n","import React from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport {AnimationDetail, AnimationListV2} from \"./index\";\n\nconst AnimationRouter = ({match}: any) => {\n    return (\n        <Switch>\n            <Route path={`${match.path}/:id`} component={AnimationDetail}/>\n            <Route path={`${match.path}`} component={AnimationListV2}/>\n        </Switch>\n    );\n};\n\nexport default AnimationRouter;\n","import React from \"react\";\nimport {Card} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {PAGE_PATHS} from \"../../constants/constants\";\nimport \"./SimpleCard.scss\";\n\nconst SimpleCard = ({id, title, coverImage, genres}: any) => {\n    const {Meta} = Card;\n\n    return <Link to={`${PAGE_PATHS.ANIMATION_LIST}/${id}`}>\n        <Card className={\"simple-card\"}\n              hoverable\n              cover={<img className={\"simple-card-preview\"} alt={title} src={coverImage}/>}>\n            <Meta title={title} description={genres.join(' / ').substr(0, 25)}/>\n        </Card>\n    </Link>\n};\n\nexport default SimpleCard;\n","import React from \"react\";\nimport {Spin} from \"antd\";\n\nconst FullScreenSpin = () => {\n    return (<div style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: \"100%\",\n        height: \"100%\"\n    }}>\n        <Spin size={\"large\"} tip={\"loading...\"} />\n    </div>)\n};\n\nexport default FullScreenSpin;\n","import React, {Component} from \"react\";\nimport {STORES} from \"../../constants/constants\";\nimport AnimationListStore from \"../../stores/animation/AnimationListStore\";\nimport {inject, observer} from \"mobx-react\";\nimport {SimpleCard} from \"../../components/card\";\nimport {Button, Checkbox, Icon, Pagination, Select} from \"antd\";\nimport {FullScreenSpin} from \"../../components/spin\";\nimport \"./AnimationListV2.scss\";\nimport {CheckboxChangeEvent} from \"antd/es/checkbox\";\nimport {RouteComponentProps} from \"react-router-dom\";\nimport queryString from \"query-string\";\n\ninterface Props extends RouteComponentProps {\n    [STORES.ANIMATION_STORE]: AnimationListStore\n}\n\nclass AnimationListV2 extends Component<Props> {\n    componentDidMount(): void {\n        this.reset();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.location !== prevProps.location) {\n            this.reset();\n        }\n    }\n\n    onGenreChange = (e: CheckboxChangeEvent) => {\n        let {genres} = this.props[STORES.ANIMATION_STORE].param;\n        if (!genres) {\n            genres = [];\n        }\n\n        if (e.target.checked) {\n            genres.push(e.target.value);\n        } else {\n            genres = genres.filter(genre => genre !== e.target.value);\n        }\n\n        this.props[STORES.ANIMATION_STORE].setParam({\n            ...this.props[STORES.ANIMATION_STORE].param,\n            page: 1,\n            genres: genres\n        });\n\n        this.getList();\n    };\n\n    onPageChange = (current: number, perPage: number = this.props[STORES.ANIMATION_STORE].param.perPage) => {\n        this.props[STORES.ANIMATION_STORE].setParam({\n            ...this.props[STORES.ANIMATION_STORE].param,\n            page: current,\n            perPage: perPage\n        });\n        this.getList();\n    };\n\n    onSortChange = (sort: string) => {\n        this.props[STORES.ANIMATION_STORE].setParam({\n            ...this.props[STORES.ANIMATION_STORE].param,\n            sort: sort\n        });\n        this.getList();\n    };\n\n    getList = () => {\n        this.props[STORES.ANIMATION_STORE].getAnimations();\n    };\n\n    reset = () => {\n        const query = queryString.parse(this.props.location.search);\n        this.props[STORES.ANIMATION_STORE].setParam({\n            page: 1,\n            perPage: 10,\n            search: query.search as string || ''\n        });\n\n        this.getList();\n    };\n\n    render() {\n        const {pageInfo, animations, isLoading, param} = this.props[STORES.ANIMATION_STORE];\n        if (isLoading) {\n            return <FullScreenSpin/>\n        }\n\n        const render = animations.map(media => (\n            <SimpleCard key={media.id}\n                        id={media.id}\n                        title={media.title.romaji}\n                        coverImage={media.coverImage.large}\n                        genres={media.genres}\n            />\n        ));\n\n        const genres = !param.genres ? [] : param.genres;\n        return <div className=\"content-wrap\">\n            <aside className=\"sidebar\">\n                <div className=\"main-title\">\n                    <div>Filter</div>\n                    <Button size={\"small\"} onClick={this.reset}>Reset<Icon type=\"redo\"/></Button>\n                </div>\n                <div className=\"sidebar-filter border-bottom\">\n                    <div className=\"sidebar-filter-title\">Genres</div>\n                    <div className=\"sidebar-filter-item\">\n                        <div><Checkbox onChange={this.onGenreChange} value={\"Drama\"} checked={genres.some(genre => genre === 'Drama')}>Drama</Checkbox></div>\n                        <div><Checkbox onChange={this.onGenreChange} value={\"Sci-Fi\"} checked={genres.some(genre => genre === 'Sci-Fi')}>Sci-Fi</Checkbox></div>\n                        <div><Checkbox onChange={this.onGenreChange} value={\"Action\"} checked={genres.some(genre => genre === 'Action')}>Action</Checkbox></div>\n                        <div><Checkbox onChange={this.onGenreChange} value={\"Comedy\"} checked={genres.some(genre => genre === 'Comedy')}>Comedy</Checkbox></div>\n                        <div><Checkbox onChange={this.onGenreChange} value={\"Romance\"} checked={genres.some(genre => genre === 'Romance')}>Romance</Checkbox></div>\n                        <div><Checkbox onChange={this.onGenreChange} value={\"Fantasy\"} checked={genres.some(genre => genre === 'Fantasy')}>Fantasy</Checkbox></div>\n                    </div>\n                </div>\n            </aside>\n            <div className=\"content\">\n                <div style={{padding: 10, fontSize: '1.5em', marginBottom: 10}}>Total of {pageInfo.total}</div>\n                <div className=\"pagination-wrap\" style={{marginBottom: 10}}>\n                    <div className=\"sort\">\n                        <Select defaultValue={param.sort} onChange={this.onSortChange}\n                                style={{width: 160}}>\n                            <Select.Option value=\"TRENDING_DESC\">Trending</Select.Option>\n                            <Select.Option value=\"FAVOURITES_DESC\">Favourites</Select.Option>\n                            <Select.Option value=\"SCORE_DESC\">Score</Select.Option>\n                            <Select.Option value=\"START_DATE_DESC\">Start date</Select.Option>\n                        </Select>\n                    </div>\n                    <div className=\"pagination\">\n                        <Pagination\n                            showSizeChanger\n                            defaultCurrent={pageInfo.currentPage}\n                            defaultPageSize={pageInfo.perPage}\n                            onShowSizeChange={this.onPageChange}\n                            onChange={this.onPageChange}\n                            total={pageInfo.total}\n                        />\n                    </div>\n                </div>\n                <div>\n                    {render}\n                </div>\n                <div className=\"pagination-wrap\">\n                    <div className=\"sort\">\n                        <Select defaultValue={param.sort} onChange={this.onSortChange}\n                                style={{width: 160}}>\n                            <Select.Option value=\"TRENDING_DESC\">Trending</Select.Option>\n                            <Select.Option value=\"FAVOURITES_DESC\">Favourites</Select.Option>\n                            <Select.Option value=\"SCORE_DESC\">Score</Select.Option>\n                            <Select.Option value=\"START_DATE_DESC\">Start date</Select.Option>\n                        </Select>\n                    </div>\n                    <div className=\"pagination\">\n                        <Pagination\n                            showSizeChanger\n                            defaultCurrent={pageInfo.currentPage}\n                            defaultPageSize={pageInfo.perPage}\n                            onShowSizeChange={this.onPageChange}\n                            onChange={this.onPageChange}\n                            total={pageInfo.total}\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>;\n    }\n}\n\nexport default inject(STORES.ANIMATION_STORE)(observer(AnimationListV2));\n","import React, {Component} from 'react';\n\nclass AnimationDetail extends Component<any, any> {\n    render() {\n        const {match} = this.props;\n        const id = match.params.id;\n\n        return (\n            <div>\n                Detail : {id}\n            </div>\n        );\n    }\n}\n\nexport default AnimationDetail;\n","import React, {Component} from \"react\";\nimport {Input} from 'antd';\nimport {Logo} from \"../logo\";\nimport './DefaultLayout.scss';\nimport {Redirect, Route, RouteComponentProps, Switch} from \"react-router-dom\";\nimport {AnimationRouter} from \"../../pages/animations\";\nimport {PAGE_PATHS} from \"../../constants/constants\";\n\nconst { Search } = Input;\n\nclass DefaultLayout extends Component<RouteComponentProps> {\n    onSearch = (value: string) => {\n        this.props.history.push(`${PAGE_PATHS.ANIMATION_LIST}?search=${value}`);\n    };\n\n    render() {\n        return (\n            <div className=\"default-layout\">\n                <header className=\"default-header\">\n                    <Logo className=\"logo\" />\n                    <Search\n                        className=\"search\"\n                        placeholder=\"input search text\"\n                        onSearch={this.onSearch}\n                    />\n                </header>\n                <div className=\"default-content-layout\">\n                    <Switch>\n                        <Route path={PAGE_PATHS.ANIMATION_LIST} component={AnimationRouter}/>\n                        <Redirect from={'/'} to={PAGE_PATHS.ANIMATION_LIST} />\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default DefaultLayout;\n","import React from 'react';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport client from './AnilistClient';\nimport 'antd/dist/antd.css';\nimport {DefaultLayout} from \"./components/layout\";\n\nconst App: React.FC = () => {\n    return (\n        <ApolloProvider client={client}>\n            <BrowserRouter>\n                <Switch>\n                    <Route path={'/'} component={DefaultLayout}/>\n                </Switch>\n            </BrowserRouter>\n        </ApolloProvider>\n    );\n}\n\nexport default App;\n","import {action, decorate, observable} from \"mobx\";\nimport AnimationService, {AnimationsParam, Media, PageInfo} from \"../../services/AnimationService\";\n\nclass AnimationListStore {\n    isLoading: boolean = false;\n    param: AnimationsParam = {page: 1, perPage: 10};\n    animations: Array<Media> = [];\n    pageInfo: PageInfo = {\n        currentPage: 1,\n        hasNextPage: false,\n        lastPage: 1,\n        perPage: 10,\n        total: 0\n    };\n\n    constructor(private animationService: AnimationService) {\n    }\n\n    getAnimations() {\n        this.isLoading = true;\n        const requestParam = {\n            page: this.param.page,\n            perPage: this.param.perPage,\n            isAdult: !!this.param.isAdult,\n            sort: !this.param.sort ? 'TRENDING_DESC' : this.param.sort\n        };\n\n        if (this.param.search) Object.assign(requestParam, {search: this.param.search});\n        if (this.param.genres && this.param.genres.length > 0) Object.assign(requestParam, {genres: this.param.genres});\n        this.param = requestParam;\n\n        this.animationService.getAnimations(requestParam).then(response => {\n            this.animations = response.data.Page.media;\n            this.pageInfo = response.data.Page.pageInfo;\n        }).finally(() => {\n            this.isLoading = false;\n        });\n    }\n\n    setParam(param: AnimationsParam) {\n        this.param = param;\n    }\n}\n\ndecorate(AnimationListStore, {\n    animations: observable,\n    pageInfo: observable,\n    param: observable,\n    isLoading: observable,\n    setParam: action,\n    getAnimations: action,\n});\n\nexport default AnimationListStore;\n","import {ANIMATION_LIST_QUERY, ANIMATION_QUERY} from \"../queries/queries\";\nimport {createApolloFetch} from \"apollo-fetch\";\n\nexport type AnimationData = {\n    data: Animation;\n}\n\nexport type Animation = {\n    Page: Page;\n}\n\nexport type Page = {\n    pageInfo: PageInfo;\n    media: Array<Media>;\n}\n\nexport type PageInfo = {\n    total: number;\n    perPage: number;\n    currentPage: number;\n    lastPage: number;\n    hasNextPage: boolean;\n}\n\nexport type Media = {\n    id: number;\n    title: MediaTitle;\n    coverImage: MediaCoverImage;\n    genres: Array<string>;\n    status: string;\n    description: string;\n    startDate: FuzzyDate;\n    averageScore: number;\n    trailer: MediaTrailer;\n    relations: MediaConnection;\n}\n\nexport type MediaConnection = {\n    nodes: Array<Media>;\n}\n\nexport type MediaTrailer = {\n    id: string;\n    site: string;\n    thumbnail: string;\n}\n\nexport type FuzzyDate = {\n    year: string;\n    month: string;\n    day: string;\n}\n\nexport type MediaTitle = {\n    romaji: string;\n    english: string;\n    native: string;\n}\n\nexport type MediaCoverImage = {\n    extraLarge: string;\n    large: string;\n    medium: string;\n}\n\nexport type AnimationsParam = {\n    page: number;\n    perPage: number;\n    isAdult?: boolean;\n    sort?: string;\n    search?: string;\n    genres?: Array<string>;\n}\n\nclass AnimationService {\n    private fetch = createApolloFetch({\n        uri: 'https://graphql.anilist.co'\n    });\n\n    public async getAnimations(param: AnimationsParam): Promise<AnimationData> {\n        return await this.fetch({\n            query: ANIMATION_LIST_QUERY,\n            variables: param\n        });\n    }\n\n    public async getAnimation(id: number): Promise<AnimationData> {\n        return await this.fetch({\n            query: ANIMATION_QUERY,\n            variables: {id: id}\n        });\n    }\n}\n\nexport default AnimationService;\n","export const ANIMATION_LIST_QUERY = `\n    query ($page: Int, $perPage: Int, $isAdult: Boolean, $sort: MediaSort, $search: String, $genres: [String]){\n        Page(page:$page, perPage:$perPage) {\n            pageInfo{\n                total\n                perPage\n                currentPage\n                lastPage\n                hasNextPage\n            },\n            media(isAdult: $isAdult, sort: [$sort], search: $search, genre_in: $genres) {\n                id\n                title{\n                    romaji\n                    english\n                    native\n                },\n                coverImage{\n                    extraLarge\n                    large\n                    medium\n                },\n                genres\n            }\n        }\n    }\n`;\n\nexport const ANIMATION_QUERY = `\nquery ($id: Int) {\n    Media (id: $id) {\n        id\n        title{\n            romaji\n            english\n            native\n        }\n        coverImage{\n            extraLarge\n            large\n            medium\n        }\n        genres\n        status\n        description\n        startDate{\n            year\n            month\n            day\n        }\n        averageScore\n        trailer {\n            site\n            thumbnail\n            id\n        }\n        relations {\n            nodes {\n                title {\n                  romaji\n                  english\n                  native\n                }\n                description\n                coverImage {\n                  extraLarge\n                  large\n                  medium\n                }\n            }\n        }\n    }\n}\n`;\n","import AnimationListStore from \"./animation/AnimationListStore\";\nimport AnimationService from \"../services/AnimationService\";\n\nexport default class RootStore {\n    static instance: RootStore;\n\n    animationStore = new AnimationListStore(new AnimationService());\n}\n","import RootStore from \"../stores/RootStore\";\nimport {Provider} from \"mobx-react\";\nimport React from \"react\";\n\nconst rootStore = new RootStore();\nconst StoreProvider: React.FunctionComponent = ({children }) => (<Provider {...rootStore}>{children}</Provider>);\n\nexport default StoreProvider;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\nimport StoreProvider from \"./providers/StoreProvider\";\n\nReactDOM.render(\n    <StoreProvider>\n        <App/>\n    </StoreProvider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}